---
title: "Study: Many Archived Packages Return to CRAN"
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  message = FALSE,
  echo = FALSE
)
```


```{r, echo = FALSE}
library("dplyr")
logic2string <- function(x){
  y <- NA
  y[x] <- "yes"
  y[!x] <- "no"
  y
}
url <- "https://cran.r-project.org/src/contrib/PACKAGES.in"
con <- url(url)
file <- read.dcf(con) |> 
  as.data.frame()

# Extract multiline comments
comments_l <- lapply(file$`X-CRAN-Comment`, function(x) {
  unlist(strsplit(x, "[\n]+"), FALSE, FALSE)
})
comments_c <- unlist(comments_l)
df <- data.frame(package = rep(file$Package, lengths(comments_l)),
           comment = comments_c)
regex_date <- "([0-9]{4}-[0-9]{2}-[0-9]{2})"
regex_action <- "([Uu]narchived?|[Aa]rchived?|[Rr]enamed?|[Oo]rphaned?|[Rr]eplaced?|[Rr]emoved?)"
comments_df <- cbind(df, 
           strcapture(pattern = regex_date, x = df$comment, 
                      proto = data.frame(date = Sys.Date()[0])),
           strcapture(pattern = regex_action, x = df$comment,
                      proto = data.frame(action = character()))
           ) |> 
  filter(!is.na(comment)) |> 
  mutate(action = tolower(action))
# Check that count(comments_df, !is.na(date), !is.na(action), sort = TRUE) makes sense
# Handle rolled and no keyword used
comments_df$action[!is.na(comments_df$date) & is.na(comments_df$action)] <- "archived"

# filter(comments_df, !is.na(action) & is.na(date)) |> View("a")
# filter(comments_df, is.na(action) & is.na(date)) |> View("b")
# Handle CRAN-history
history_l <- lapply(file$`X-CRAN-History`, function(x) {
  unlist(strsplit(x, "[\n]+"), FALSE, FALSE)
})
history_c <- unlist(history_l)

history_df <- data.frame(package = rep(file$Package, lengths(history_l)),
                    comment = history_c) |> 
  filter(!is.na(comment))

history_df <- cbind(history_df,
                    strcapture(pattern = regex_date, x = history_df$comment, 
                               proto = data.frame(date = Sys.Date()[0])),
                    strcapture(pattern = regex_action, x = history_df$comment,
                               proto = data.frame(action = character()))
           ) |> 
  mutate(action = tolower(action))
history_df$action[grep("Back on CRAN", history_df$comment, ignore.case = TRUE)] <- "unarchived"
library("reactable")
history <- rbind(comments_df, history_df) |> 
  mutate(action = gsub(pattern = "e$", replacement = "ed", action)) |> 
  arrange(package) |>
  relocate(date) |>
  relocate(comment, .after = last_col()) |>
  filter(action %in% c("archived", "unarchived"),
         !is.na(date),
         !is.na(action)) 
```

```{r, echo = FALSE}
archive <- tools:::CRAN_archive_db()
pkges <- unique(history$package[history$action %in% c("archived", "unarchived")])

# packages in archive
pkgs <- intersect(pkges, names(archive))
relevant_archive <- archive[pkgs]
archive_df <- do.call(rbind, relevant_archive)

archives <- vapply(relevant_archive, nrow, numeric(1))
pkg <- rep(names(relevant_archive), times = archives)
archive_df$package <- pkg

current <- tools:::CRAN_current_db()
current$package <- gsub("(.*)_.*\\.tar\\.gz$", "\\1", rownames(current))
relevant_current <- current[current$package %in% pkgs, ]

packages <- rbind(archive_df, relevant_current) |> 
  mutate(date = as.Date(mtime), action = "new") |> 
  arrange(package, date) |> 
  select(date, package, action)

rownames(packages) <- NULL
```

```{r, echo = FALSE}
out <- merge(packages, history, all = TRUE, sort = FALSE) |> 
  arrange(package, date) 
```

```{r, echo = FALSE}
# There is no package that the unarchived date isn't recorded as new
void <- out |> 
  summarise(.by = package, 
            n_unarchive = sum(action == "unarchived"),
            n_archive = sum(action == "archived"),
            k = any(date[action == "unarchive"] != date[action == "new"])) |> 
  filter(k)
```

```{r, echo = FALSE}
# Packages with problems with annotation about being archived
over_unarchived <- out |> 
  summarise(.by = package,
            missing = sum(action == "unarchived") > sum(action == "archived")) |> 
  filter(missing) |> 
  pull(package)
```

```{r, echo = FALSE}
more <- out |> 
  filter(action != "unarchived") |> 
  filter(!package %in% over_unarchived) |> 
  group_by(package) |> 
  filter(cumsum(action == "archived") >= 1) |>
  filter(!all(action == "archived")) |> 
  # filter(ar > 0 & n > ar) |> 
  mutate(lead = lead(action, default = NA),
         lag = lag(action, default = NA)) |> 
  filter((action == "archived" & lead == "new") | 
           (action == "new" & lag == "archived")) |>
  mutate(times_archived = rep(1:9, each = 2, length.out = n())) |> 
  ungroup()
  
library("tidyr")
pw <- more |> 
  select(package, times_archived, action, date) |> 
  pivot_wider(names_from =action, values_from = date) |> 
  mutate(timediff = difftime(new, archived, units = "days"))
```

CRAN packages are archived all the time, but a large portion of them
eventually gets fixed and return to CRAN.  Using public data available
from different resources on CRAN[^1], we find that 36% of the archived
packages get unarchived at some point. The median time for these
packages to return to CRAN is ~30 days.

[^1]: Data sources used are `tools:::CRAN_current_db()`,
`tools:::CRAN_archive_db()`, and [PACKAGES.in].


## Analysis

### Summary of how long it takes packages to be unarchived

```{r}
fiu <- function(x){is(x, "difftime")}
pw |> summarise(.by = times_archived, 
                packages = n(), 
                min = min(timediff), 
                q1 = quantile(timediff, 0.25), 
                mean = mean(timediff), 
                m = median(timediff), 
                q3 = quantile(timediff, 0.75), 
                max = max(timediff)) |> 
  mutate(across(where(fiu), round)) |> 
  as.data.frame()
```


### Return time for packages archived only once in their lifetime

```{r}
library("ggplot2")
pw |> 
  filter(times_archived == "1") |> 
  ggplot() +
  stat_ecdf(aes(timediff)) +
  coord_cartesian(xlim =  c(0, 365))
```


### Cumulative number of archived packages over the years

```{r}
pw |> 
  arrange(archived) |> 
  mutate(n = cumsum(seq_len(n()))) |> 
  ggplot() +
  geom_line(aes(archived, n)) +
  theme_minimal() +
  scale_y_log10(guide = "axis_logticks")
```


### Days to return versus date when archived

```{r}
pw |> 
  ggplot() +
  geom_count(aes(archived, timediff)) +
  geom_abline(slope = -1, intercept = Sys.Date(), linetype = 2, col = "gray") +
  geom_rug(aes(archived, timediff), sides = "b", outside = TRUE, length = unit(0.015, "npc"), 
           col = "gray") +
  theme_minimal() +
  coord_cartesian(clip = "off") +
  scale_y_continuous(expand = expansion(c(0, NA), c(0, NA))) +
  labs(x = "Date when the package was archived",
       y = "Time until it went back to CRAN",
       title = "Time till packages are back to CRAN")
```


### Distribution of number of days for packages to return to CRAN

```{r}
pw |> 
  ggplot() +
  geom_histogram(aes(timediff), binwidth = 7) +
  theme_minimal() +
  scale_y_continuous(expand = expansion(c(0, NA), c(0, NA))) +
  labs(y = "Packages that got back",
       x = "Time until it went back to CRAN",
       title = "Time till packages are back to CRAN")
```


[PACKAGES.in]: https://cran.r-project.org/src/contrib/PACKAGES.in
